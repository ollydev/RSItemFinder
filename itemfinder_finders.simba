function TRSInventory.FindAll(Identifers: TStringArray): TIntegerArray; overload;
var
  Identifer: String;
begin
  if Self.Open() then
    for Identifer in Identifers do
      Result += ItemFinder.Find(Identifer, Self.FSlots);
end;

function TRSInventory.FindAll(Identifer: String): TIntegerArray; overload;
begin
  Result := Self.FindAll([Identifer]);
end;

function TRSInventory.Find(Identifers: TStringArray): Int32; overload;
var
  Identifer: String;
  Matches: TIntegerArray;
begin
  for Identifer in Identifers do
  begin
    Matches := Self.FindAll(Identifer);
    if Length(Matches) > 0 then
      Exit(Matches[0]);
  end;

  Exit(-1);
end;

function TRSInventory.Find(Identifer: String): Int32; overload;
begin
  Result := Self.Find([Identifer]);
end;

function TRSInventory.Count(Identifers: TStringArray): Int32; overload;
var
  Identifer: String;
begin
  for Identifer in Identifers do
    Result += Length(Self.FindAll(Identifer));
end;

function TRSInventory.Count(Identifer: String): Int32; overload;
begin
  Result := Self.Count([Identifer]);
end;

function TRSInventory.CountStack(Identifer: String): Int32;
var
  Slot: Int32;
begin
  Slot := Self.Find(Identifer);
  if (Slot > -1) then
    Result := srl.GetItemAmount(Self.GetSlotBox(Slot));
end;

function TRSInventory.Click(Identifers: TStringArray; Option: String = ''): Boolean; overload;
var
  Slot: Int32;
begin
  Slot := Self.Find(Identifers);

  if (Slot > -1) then
  begin
    Self.MouseSlot(Slot, mouse_Move);

    if (Option = '') then
      Mouse.Click(mouse_Left)
    else
    if (not ChooseOption.Open()) or (not ChooseOption.Select(Option)) then
      Exit(False);

    Exit(True);
  end;
end;

function TRSInventory.Click(Identifer: String; Option: String = ''): Boolean; overload;
begin
  Result := Self.Click([Identifer], Option);
end;

function TRSBankScreen.Find(Identifers: TStringArray): Int32; overload;
var
  Identifer: String;
  Matches: TIntegerArray;
begin
  Self.FixSlots();

  for Identifer in Identifers do
  begin
    Matches := ItemFinder.Find(Identifer, Self.FSlots);
    if Length(Matches) > 0 then
      Exit(Matches[0]);
  end;

  Exit(-1);
end;

function TRSBankScreen.Find(Identifer: String): Int32; overload;
begin
  Result := Self.Find([Identifer]);
end;

function TRSBankScreen.Withdraw(Identifier: String; Amount: Int32; UpText: TStringArray = []; WithdrawMode: EBankButton = BANK_BUTTON_WITHDRAW_ITEM; Quantity: EBankButton = BANK_BUTTON_QUANTITY_ONE): Boolean; overload;
var
  Slot: Int32;
begin
  Slot := Self.Find(Identifier);
  if (Slot > -1) then
    Result := Self.Withdraw(Slot, Amount, UpText, WithdrawMode, Quantity);
end;

function TRSBankScreen.WithdrawEx(Identifer: String; Amount: Int32; WithdrawMode: EBankButton = BANK_BUTTON_WITHDRAW_ITEM; Quantity: EBankButton = BANK_BUTTON_QUANTITY_ONE): Boolean;
var
  B: TBox;
  TPA: TPointArray;
  T: UInt64;
begin
  if Self.Withdraw(Identifer, Amount, TStringArray([]), WithdrawMode, Quantity) then
    Exit(True);

  if Self.Search(Identifer) then
  begin
    B := Self.GetBounds();
    B.Y1 += 75;
    B.X1 += 10;
    B.X2 -= 22;
    B.Y2 -= 42;

    T := GetTickCount() + Random(2500, 3000);
    while (T > GetTickCount()) do
    begin
      if SRL.FindColors(TPA, CTS2(3358280, 1, 0.80, 0.41), B) > 0 then
        for TPA in TPA.Invert().Cluster(3) do
        begin
          B := TPA.Bounds();

          if ItemFinder.Find(Identifer, [B]) <> [] then
            Exit(Self.Withdraw(B, Amount, TStringArray([]), WithdrawMode, Quantity));
        end;

      Wait(0, 500, wdLeft);
    end;
  end;
end;

function TRSBankScreen.Count(Identifer: String): Int32;
begin
  Self.FixSlots();

  Result := Length(ItemFinder.Find(Identifer, Self.FSlots));
end;

function TRSBankScreen.CountStack(Identifer: String): Int32;
var
  Slot: Int32;
begin
  Slot := Self.Find(Identifer);
  if (Slot > -1) then
    Result := srl.GetItemAmount(Self.GetSlotBox(Slot));
end;
